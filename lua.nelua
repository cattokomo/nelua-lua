##[[
	config.lua_bindings = config.lua_bindings or {
		target_version = LUA_TARGET_VERSION,
		include_dir = LUA_INCLUDE_DIR,
		ignore_cache = LUA_IGNORE_CACHE,
	}

	if not config.lua_bindings.target_version then
		static_error("set config.lua_bindings.target_version or define LUA_TARGET_VERSION with value either 51, 52, 53, 54, or jit to use LuaJIT")
	end

	local typev = type(config.lua_bindings.target_version)
	if not (
		typev == "number" and config.lua_bindings.target_version > 50 and config.lua_bindings.target_version < 55
		or
		typev == "string" and config.lua_bindings.target_version == "jit"
	) then
		static_error("invalid target version: " .. config.lua_bindings.target_version)
	end

	local luajit_header

	if config.lua_bindings.target_version == "jit" then
		config.lua_bindings.target_jit = true
		config.lua_bindings.target_version = 51
		luajit_header = "<luajit.h>"
	end

	local lfs = require("lfs")
	local fs = require("nelua.utils.fs")
	local executor = require("nelua.utils.executor")
	local nldecl = require("nelua.plugins.nldecl")

	local include_dir = config.lua_bindings.include_dir or "."
	local cache_dir = fs.getusercachepath("nelua-lua-bindings")
	lfs.mkdir(cache_dir)

	local output = fs.join(cache_dir, "lua" .. config.lua_bindings.target_version .. ".nelua")
	local oldpath = config.path
	config.path = config.path .. ";" .. cache_dir .. "/?.nelua"

	if (config.lua_bindings.ignore_cache and fs.isfile(output)) or not fs.isfile(output) then
		nldecl.generate_bindings_file({
		  output_file = output,
		  parse_includes = { "<lua.h>", "<lauxlib.h>", "<lualib.h>", luajit_header },
			include_dirs = { include_dir },
			include_names = { "^lua", "^LUA" },

			output_head = ([=[
## cincdir "%s"
## cinclude "<lua.h>"
## cinclude "<lauxlib.h>"
## cinclude "<lualib.h>"
%s]=]):format(include_dir, luajit_header and '## cinclude "<luajit.h>"' or "")
		})
	end
]]

##[[
	local function comptime_raise(fmt, ...)
		static_error("lua error: " .. fmt:format(...))
	end

	local function type_is(T, p)
		return T["is_" .. p]
	end
]]

require("lua"..#[tostring(config.lua_bindings.target_version)]#)
local function lua_pop(L: *lua_State, n: cint): void <cimport, nodecl> end

require("string")
require("allocators.default")

local allocator = default_allocator

--! Namespace for Lua bindings
global lua = @record{}

--! Namespace for helpers
global lua.helpers = @record{}

--#[[ Types

global lua.State <forwarddecl> = @record{}
## lua.value.metafields.State.value.is_lua_state = true

global lua.StackCheck <forwarddecl> = @record{}

global lua.Type = @enum{
	None = LUA_TNONE,
	Nil = LUA_TNIL,
	Number = LUA_TNUMBER,
	Boolean = LUA_TBOOLEAN,
	String = LUA_TSTRING,
	Table = LUA_TTABLE,
	Function = LUA_TFUNCTION,
	Userdata = LUA_TUSERDATA,
	Thread = LUA_TTHREAD,
	LightUserdata = LUA_TLIGHTUSERDATA,
}

local CFunctionConcept = #[concept(function(x)
	if x.type:is_equal(lua_CFunction) then
		return true
	end

	if not type_is(x.type, "function") then
		return nil, "expected type function, got '" .. x.type.nickname or x.type.name .. "'"
	end

	if type_is(x.type, "polyfunction") then
		return nil, "cannot accept a polymorphic function"
	end

	local typ = x.type.argtypes[1]
	local rettyp = x.type.rettypes[1]
	if not (typ and typ.is_pointer and
			(type_is(typ.subtype, "lua_state") or tostring(typ.subtype) == "lua_State" and tostring(rettyp) == "cint")) then
		return nil, "expected `function(*lua.State): T` or `function(*lua_State): cint`"
	end

	return true
end)]#

--#]]

--#[[ lua.helpers

function lua.helpers.wrap_cfunction(func: CFunctionConcept <comptime>)
	## if tostring(func.type.argtypes[1].subtype) == "lua_State" and tostring(func.type.rettypes[1]) == "cint" then
		return func
	## else
		return function(preL: *lua_State): cint
			## func.node.attr.inline = true
			local L = (@*lua.State)(preL)
			local result = func(L)
			local scheck = lua.StackCheck{L:gettop()}

			## if func.type.rettypes[1].is_integral then
				return scheck:check(func, L, result)
			## else
			 	L:push(result)
				return scheck:check(func, L, 1)
			## end
		end
	## end
end

--[=[
function lua.helpers.wrap_function(func: auto <comptime>)
	## if func.type.is_function then
		local T = #[func.type.rettypes[1]]#

		## if #func.type.argtypes == 1 and func.type.argtypes[1].is_pointer and tostring(func.type.argtypes[1].subtype) == "lua_State" then
			return lua.helpers.wrap_cfunction(func)
		## else
			return function()
]=]

--#]]

--#[[ lua.StackCheck

lua.StackCheck = @record{
	top: integer
}

function lua.StackCheck:check(func: CFunctionConcept <comptime>, L: *lua.State, pushed: integer): integer
	## if pragmas.nocheck then
		return 0
	## else
		local new_top = L:gettop()
		if new_top ~= self.top + pushed then
			## if func.type.is_function then
				## local node = func.value.node
				## local name = type(node) == "string" and node or "anonymous function"
				## local lineno = require("lpegrex").calcline(node.src.content, node.pos)
				L:error(
					"stack check failed in %s at %s:%d (expected %d items but %d were pushed)",
					#[name]#,
					#[node.src.name]#,
					#[lineno]#,
					pushed,
					new_top - self.top
				)
			## else
				L:error("stack check failed (expected %d items but %d were pushed)", pushed, new_top - self.top)
			## end
		end
		return pushed
	## end
end
	
--]]#


--#[[ lua.State

lua.State = @lua_State

--# core functions

function lua.State.new(): *lua.State
	local L = luaL_newstate()
	if L == nilptr then
		error("cannot initialize lua state, out of memory!")
	end
	return L
end

--! Closes Lua state when not used
function lua.State:close(): void
	lua_close(self)
end

function lua.State:destroy(): void
	if self ~= nilptr then
		self:close()
	end
	delete(self)
end


--[[ If enabled, Nelua will closes Lua state at GC time .
-- * Recommended if the system doesn't free Lua state on exit.
--]]
## if not pragmas.nogc and config.lua_bindings.enable_gc then
--! GC handler
function lua.State:__gc(): void
	self:close()
end
## end

function lua.State:__close(): void
	self:close()
end

function lua.State.__convert(L: *lua_State): *lua.State
	return L
end

--# LuaJIT functions

function lua.State:luajit_setmode(index: integer, feature: string, mode: overload(boolean, string)): boolean
	## if config.lua_bindings.target_jit then
		local jit_feature: integer
		local jit_mode: integer

		if feature == "engine" then
			jit_feature = LUAJIT_MODE_ENGINE
		elseif feature == "func" then
			jit_feature = LUAJIT_MODE_FUNC
		elseif feature == "allfunc" then
			jit_feature = LUAJIT_MODE_ALLFUNC
		elseif feature == "allsubfunc" then
			jit_feature = LUAJIT_MODE_ALLSUBFUNC
		elseif feature == "wrapcfunc" then
			jit_feature = LUAJIT_MODE_WRAPCFUNC
		else
			L:error("unknown luajit feature '%s'", feature)
		end

		if mode == true then
			jit_mode = LUAJIT_MODE_ON
		elseif mode == false then
			jit_mode = LUAJIT_MODE_OFF
		elseif mode == "f" then
			jit_mode = LUAJIT_MODE_FLUSH
		else
			L:error("unknown luajit feature mode '%s'", tostring(mode))
		end

		return luaJIT_setmode(self, index, jit_feature|jit_mode) == 1
	## else
		return true
	## end -- config.lua_bindings.target_jit
end

--# stack functions

function lua.State:gettop(): integer
	return lua_gettop(self)
end

function lua.State:settop(index: integer): void
	lua_settop(self, index)
end

## local function generate_isx(typ)
	function lua.State:#|"is" .. typ|#(index: integer): boolean
		local function #|"lua_is" .. typ|#(L: *lua_State, idx: cint): cint <cimport, nodecl> end
		return #|"lua_is" .. typ|#(self, index) == 1
	end
## end

generate_isx!("boolean")
generate_isx!("cfunction")
generate_isx!("function")
generate_isx!("integer")
generate_isx!("lightuserdata")
generate_isx!("nil")
generate_isx!("none")
generate_isx!("noneornil")
generate_isx!("number")
generate_isx!("string")
generate_isx!("table")
generate_isx!("thread")
generate_isx!("userdata")

function lua.State:type(index: integer): lua.Type
	return lua_type(self, index)
end

function lua.State:typename(index: integer): string
	local typ: string
	switch self:type(index) do
	case lua.Type.None then
		typ = "none"
	case lua.Type.Nil then
		typ = "nil"
	case lua.Type.Number then
		typ = "number"
	case lua.Type.Boolean then
		typ = "boolean"
	case lua.Type.String then
		typ = "string"
	case lua.Type.Table then
		typ = "table"
	case lua.Type.Function then
		typ = "function"
	case lua.Type.Userdata, lua.Type.LightUserdata then
		typ = "userdata"
	case lua.Type.Thread then
		typ = "thread"
	end
	return typ
end

function lua.State:push(v: auto): void
	## if v.type.is_niltype then
		lua_pushnil(self)
	## elseif v.type.is_integral then
		lua_pushinteger(self, v)
	## elseif v.type.is_scalar then
		lua_pushnumber(self, v)
	## elseif v.type.is_stringy then
		lua_pushstring(self, v)
	## elseif v.type.is_boolean then
		lua_pushboolean(self, v and 1 or 0)
	## elseif v.type.is_pointer then
		lua_pushlightuserdata(self, v)
	## elseif v.type.nickname == "tupleT" then
		self:createtable(#[#v.type.fields]#, 0)

		## for _, vl in ipairs(v.type.fields) do
			self:push(v.#|vl.name|#)
			self:rawseti(-2, #[tonumber(vl.name:sub(2)) + 1]#)
		## end
	## elseif v.type.metafields and v.type.metafields.__ipairs then
		self:createtable(0, 0)

		local is_zero: boolean
		for i, v in ipairs(v) do
			if not is_zero then
				is_zero = i == 0
			end
			self:push(v)
			self:rawseti(-2, i + (is_zero and 1 or 0))
		end
	## elseif v.type.metafields and v.type.metafields.__pairs then
		self:createtable(0, 0)

		for k, v in pairs(v) do
			self:push(k)
			self:push(v)
			self:settable(-3)
		end
	## elseif v.type.is_container then
		self:createtable(#v, 0)

		for i = #[v.type.is_oneindexing and 1 or 0]#, #v - #[v.type.is_oneindexing and 0 or 1]# do
			local vl = v[i]
			## if not v.type.is_oneindexing then
				i = i + 1
			## end
			self:push(vl)
			self:rawseti(-2, i)
		end
	## elseif v.type.is_record or v.type.is_union then
		self:createtable(0, #[#v.type.fields]#)
	
		## for _, vl in ipairs(v.type.fields) do
			self:push(v.#|vl.name|#)
			self:setfield(-2, #[vl.name]#)
		## end
	## elseif v.type.is_type then
		## if v.value.is_record or v.value.is_union then
			self:createtable(0, #[#v.value.fields]#)

			## for _, vl in ipairs(v.value.fields) do
				self:push((@#[vl.type]#)())
				self:setfield(-2, #[vl.name]#)
			## end
		## elseif v.value.is_enum then
			self:createtable(0, #[#v.value.fields]#)

			## for _, vl in ipairs(v.value.fields) do
				self:push(#[vl.value]#)
				self:setfield(-2, #[vl.name]#)
			## end
		## end
	## else
	## comptime_raise("unable to push a value '%s'", tostring(v.type))
	## end
end

function lua.State:pushvalue(index: integer): void
	lua_pushvalue(self, index)
end

function lua.State:to(T: type, index: integer): auto
	local ret: T
	## if T.value.is_stringy then
		ret = lua_tolstring(self, index, nilptr)
	## elseif T.value.is_integral then
		ret = lua_tointegerx(self, index, nilptr)
	## elseif T.value.is_float then
		ret = lua_tonumber(self, index)
	## elseif T.value.is_boolean then
		ret = lua_toboolean(self, index)
	## elseif T.value.is_pointer then
		ret = lua_touserdata(self, index)
	## else
	## static_error("invalid type to convert to: " .. tostring(T.value))
	## end
	return ret
end

function lua.State:pop(index: integer): void
	lua_pop(self, index)
end

--[[
function lua.State:check(T: type, index: integer): auto
	## if T.value.is_stringy then
		if not self:isstring(index) then
			self:error("expected string, got %s", self:typename(index))
			return (@T)()
		end
	## elseif T.value.is_integral then
		if not self:isinteger(index) then
			self:error("expected integer, got %s", self:typename(index))
			return (@T)()
		end
	## elseif T.value.is_float then
		if not self:isnumber(index) then
			self:error("expected number, got %s", self:typename(index))
			return (@T)()
		end
	## elseif T.value.is_boolean then
		if not self:isboolean(index) then
			self:error("expected boolean, got %s", self:typename(index))
			return (@T)()
		end
	## elseif T.value.is_pointer then
		if not self:
]]

--# table functions

function lua.State:createtable(nseq: integer, nrec: integer): void
	lua_createtable(self, nseq, nrec)
end

function lua.State:settable(index: integer): void
	lua_settable(self, index)
end

function lua.State:setfield(index: integer, field: string): void
	lua_setfield(self, index, field)
end

function lua.State:rawset(index: integer): void
	lua_rawset(self, index)
end

function lua.State:rawseti(index: integer, n: isize): void
	lua_rawseti(self, index, n)
end

function lua.State:len(index: integer): void
	## if config.lua_bindings.target_version < 52 then
		self:push(lua_objlen(self, index))
	## else
		lua_len(self, index)
	## end
end

function lua.State:rawlen(index: integer): void
	## if config.lua_bindings.target_version < 52 then
		self:len(index)
	## else
		lua_rawlen(self, index)
	## end
end

--# misc. functions

function lua.State:throw() <noreturn>
	lua_error(self)
end

function lua.State:error(err: string, ...: varargs) <noreturn>
	self:push(err:format(...))
	self:throw()
end

function lua.State:next(index: integer): integer
	return lua_next(self, index)
end

--]]#

function lua.newstate(): *lua.State
	return lua.State.new()
end

## config.path = oldpath
