##[[
	config.lua_bindings = config.lua_bindings or {
		target_version = LUA_TARGET_VERSION,
		include_dir = LUA_INCLUDE_DIR,
		ignore_cache = LUA_IGNORE_CACHE,
	}
	if not config.lua_bindings.target_version then
		static_error("set config.lua_bindings.target_version or define LUA_TARGET_VERSION with value either 51, 52, 53, 54, or jit to use LuaJIT")
	end

	if not (config.lua_bindings.target_version > 50 and config.lua_bindings.target_version < 55 or config.lua_bindings.target_version == "jit") then
		static_error("invalid target version: " .. config.lua_bindings.target_version)
	end

	if config.lua_bindings.target_version == "jit" then
		config.lua_bindings.target_jit = true
	end

	local lfs = require("lfs")
	local fs = require("nelua.utils.fs")
	local executor = require("nelua.utils.executor")
	local nldecl = require("nelua.plugins.nldecl")

	local include_dir = config.lua_bindings.include_dir or "."
	local cache_dir = fs.getusercachepath("nelua-lua-bindings")
	lfs.mkdir(cache_dir)

	local output = fs.join(cache_dir, "lua" .. config.lua_bindings.target_version .. ".nelua")
	config.path = config.path .. ";" .. cache_dir .. "/?.nelua"

	if not config.lua_bindings.ignore_cache and not fs.isfile(output) then
		nldecl.generate_bindings_file({
		  	output_file = output,

		  	parse_includes = { "<lua.h>", "<lauxlib.h>", "<lualib.h>" },
			include_dirs = { include_dir },
			include_names = { "^lua", "^LUA" },

			output_head = ([=[
				## cinclude "<lua.h>"
				## cinclude "<lauxlib.h>"
				## cinclude "<lualib.h>"
				## cflags "-I%s"
			]=]):format(include_dir)
		})
	end
]]

require("lua"..#[tostring(config.lua_bindings.target_version)]#)
